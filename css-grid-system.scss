// CSS GRID SYSTEM
// ===============

// Variables

$mq--md: 48rem; // = 768px
$mq--lg: 64rem; // = 1024px

$grid--max-cols: 4;
$grid--max-rows: 4;
$grid--gap-width: 1rem;

// Grid

@mixin grid {
  display: grid;
  &--gap {
    grid-gap: $grid--gap-width;
  }
}

// `grid--lattice` and `grid--setup` are only used if you un-comment the
// relevant part of the class-builder below. 
// You only need this stuff if you run into problems when you're trying
// to have empty cells and/or overlapping items.

@mixin grid--lattice {
  &--h {
    @for $i from 1 through $grid--max-cols {
      &#{$i} {
        grid-template-columns: repeat($i, 1fr);
        &-v {
          @for $j from 1 through $grid--max-rows {
            &#{$j} {
              grid-template-columns: repeat($i, 1fr);
              grid-template-rows: repeat($j, 1fr);
            }
          }
        }
      }
    }
  }
}

// Example: .grid.grid-md--h4-v3 constrains a grid to 4 columns, 3 rows.
//
// From .grid-md--h1 (optional declaration for rows) to .grid-md--h4-v4
// you have up to 16 permutations. Plus 16 for .grid-lg--*

@mixin grid--setup {
  //@include grid--lattice;
  &-md {
    @media (min-width: $mq--md) {
      @include grid--lattice;
    }
  }
  &-lg {
    @media (min-width: $mq--lg) {
      @include grid--lattice;
    }
  }
}

// Column tracks and row tracks

@mixin column-tracks {
  @for $i from 1 through $grid--max-cols {
    @if $i <= $grid--max-cols {
      &--#{$i} {
        $j: $i + 1;
        @for $j from 1 through ($grid--max-cols + 1) {
          @if $j > $i {
            &-#{$j} {
              grid-column-start: $i;
              grid-column-end: $j;
            }
          }
        }
      }
    }
  }
}

@mixin row-tracks { 
  @for $i from 1 through $grid--max-rows {
    @if $i <= $grid--max-rows {
      &--#{$i} {
        $j: $i + 1;
        @for $j from 1 through  ($grid--max-rows + 1) {
          @if $j > $i {
            &-#{$j} {
              grid-row-start: $i;
              grid-row-end: $j;
            }
          }
        }
      }
    }
  }
}

@mixin justify {
  &--left {
    justify-self: start;
    [dir="rtl"] &, &[dir="rtl"],
    .rtl &, &.rtl {
      justify-self: end;
    }
  }
  &--center {justify-self: center;}
  &--right {
    justify-self: end;
    [dir="rtl"] &, &[dir="rtl"],
    .rtl &, &.rtl {
      justify-self: start;
    }
  }
  &--stretch {justify-self: stretch;}
}

@mixin align {
  &--top {align-self: start;}
  &--center {align-self: center;}
  &--bottom {align-self: end;}
  &--stretch {align-self: stretch;}
}

@mixin grid--tiny {
  .col {@include column-tracks;}
  .row {@include row-tracks;}
  .justify {@include justify;}
  .align {@include align;}
}

// CLASS BUILDERS
// ==============

.grid {
  @include grid;
  //@include grid--setup;
}

//@include grid--tiny

@media (min-width: $mq--md) {
  .col-md {@include column-tracks;}
  .row-md {@include row-tracks;}
  .justify-md {@include justify;}
  .align-md {@include align;}
}

@media (min-width: $mq--lg) {
  .col-lg {@include column-tracks;}
  .row-lg {@include row-tracks;}
  .justify-lg {@include justify;}
  .align-lg {@include align;}
}
